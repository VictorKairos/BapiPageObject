"use strict";

var webdriver = require('selenium-webdriver');

var driver = new webdriver.Builder().
    //usingServer('http://localhost.applitools.com:4444/wd/hub').
    withCapabilities(webdriver.Capabilities.chrome()).build();

var Eyes = require('./../index').Eyes;
var MatchLevel = require('./../index').MatchLevel;
var ImageMatchSettings = require('./../index').ImageMatchSettings;
var ExactMatchSettings = require('./../index').ExactMatchSettings;
var ConsoleLogHandler = require('./../index').ConsoleLogHandler;
var FailureReport = require('../index').FailureReport;
var eyes = new Eyes('https://eyesapi.applitools.com');
eyes.setApiKey(process.env.APPLITOOLS_API_KEY);

// var RemoteSessionEventHandler = require('./../index').RemoteSessionEventHandler;
// eyes.addSessionEventHandler(RemoteSessionEventHandler.createSessionEventHandler("http://localhost:8888", "THIS_IS_ACCESS"));

//eyes.setParentBranchName("branchy Jr.");
//eyes.setBranchName("wait what");
//eyes.setFailureReport(FailureReport.Immediate);
var LogHandler = require('../index').ConsoleLogHandler;
var TestResultsFormatter = require('../index').TestResultsFormatter;
var resultsFormatter = new TestResultsFormatter();
//var LogHandler = require('../index').FileLogHandler;
var handler = new LogHandler(true);
//handler.setFileName("zaza.log");
//handler.setFileDirectory("../");
//eyes.setDebugMode(true);
eyes.setLogHandler(handler);
// eyes.setForceFullPageScreenshot(true);
//eyes.setBatch("Simple Test Batch");
//eyes.setBaselineName("Javascript Selenium baseline");
//eyes.setBranchName("TestBranch1")
//eyes.setMatchLevel(MatchLevel.Layout2);
eyes.setDefaultMatchSettings(new ImageMatchSettings(MatchLevel.Exact, new ExactMatchSettings(0,0,0, 0.6)));
console.log("eyes.getMatchLevel()", eyes.getMatchLevel()); // FIXME Remove this
driver.manage().window().maximize();
eyes.open(driver, "JavaScript SDK", "JS Selenium SDK Test - github - 106", {width: 800, height: 560}).then(function (driver) {
    // console.log('driver', driver); // FIXME - remove this
    driver.get('https://github.com');
    //driver.executeScript('window.scrollTo(0,200);');
    eyes.checkWindow("github");
    // driver.executeScript('window.scrollTo(0,200);');
    // eyes.checkWindow("github scrolled");
    // driver.findElement(webdriver.By.name('user[login]')).sendKeys('webdriver');
    // eyes.checkWindow('login input');
    eyes.checkRegionByElement(driver.findElement(webdriver.By.className('btn-primary')), 'signup section');
    // eyes.checkRegionByElement(driver.findElement(webdriver.By.className('btn-theme-green')), 'signup section');
    //driver.findElement(webdriver.By.name('user[email]')).sendKeys('test@email.com');
    //eyes.checkRegionBy(webdriver.By.className('subheading'), 'login2');
    //driver.findElement(webdriver.By.name('user[password]')).sendKeys('Password321');
    //eyes.checkWindow('login input 2');
    //driver.findElement(webdriver.By.className('btn-primary')).click();
    //eyes.checkWindow('finito');
    //driver.wait(function () {
    //    return driver.getTitle().then(function (title) {
    //        return title === 'Join GitHub · GitHub';
    //    });
    //}, 1000);
    //driver.get('http://bootstrapdocs.com/v3.1.1/docs/components/#btn-dropdowns-single');
    //eyes.checkRegionBy(webdriver.By.xpath("html/body/div[3]/div/div[1]/div[4]/div[2]/div[2]/button"), 'Primary button');

    return eyes.close(false);
}).then(function (results) {
    console.log("then results: ", results);
    resultsFormatter.addResults(results);
    driver.quit();
}, function (err) {
    console.error("error results: ", err);
    resultsFormatter.addResults(err.results);
    driver.quit();
    eyes.abortIfNotClosed();
}).then(function () {
    console.log(resultsFormatter.asHierarchicTAׁPString());
});

function getImage(host, path) {
    var options = {
        host: host,
        path: path
    };

    var deferred = RSVP.defer();

    https.request(options, function (res) {
        res.setEncoding('binary'); // this

        var data = "";
        res.on('data', function(chunk) {
            return data += chunk;
        });
        res.on('end', function() {
            return deferred.resolve(new Buffer(data, 'binary'));
        });
        res.on('error', function(err) {
            console.log("Error during HTTP request");
            console.log(err.message);
            deferred.reject();
        });
    }).end();

    return deferred.promise;
}



